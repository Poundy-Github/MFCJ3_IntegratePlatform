/*
 * Linker script
 *
 * GENERATED FILE: DO NOT EDIT
 * Generated by D:\work\projects\TC38XQ_ACP\Tresos\plugins\Os_TS_T16D27M6I0R0/bin/genld-TRICORE.pl on 2018-01-31 18:51
 */

/* board-diab.ldscript
 *
 * Partial linker script to define board memory layout.
 *
 * $Id: board-diab.ldscript 28134 2018-01-16 11:44:30Z mist9353 $
 *
 * Copyright Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
*/

MEMORY
{
	/* Usage of flash:
	 *
	 * There's 3*3MiB flash in PF0 to PF2.
	 * There's   1MiB flash in PF3.
	 *
	 * Note that some of this flash might be used by the HSM.
	 * Sectors 0 to 64 of PF0 are located at 0x80000000 .. 0x800fffff.
	 * Sector size is 0x4000 B = 16 kiB.
	 * PF0 logical sectors S0 to S39 may be configured as "HSM_exclusive".
	 * In this example we don't expect that this memory is reserved for HSM.
	 *
	 *
	 * Note, that early versions of TC3XX have only 96k of int_ram_core[01],
	 * while newer steppings will have 2*240k for core 0 and core 1.
	*/

	int_rom_vect  : org = 0x80000000, len = 20k
	int_rom       : org = 0x80005000, len = 10240k
	int_ram_core0 : org = 0x70000000, len = (96k - (256*64))
	int_ram_core1 : org = 0x60000000, len = (96k - (0*64))
	int_ram_core2 : org = 0x50000000, len = (96k - (0*64))
	int_ram_core3 : org = 0x40000000, len = (96k - (0*64))
}

/* Where the CSA memory is located:
 * OS_csaCorex_BEGIN is the base of the CSA block of core x
 * 256 is the number of CSAs in the block
 *
 * OS_csaCorex_BEGIN must be aligned on a 64-byte boundary (lower 6 bits all zero)
 */
OS_csaCore0_BEGIN  = 0xd0000000 + SIZEOF(int_ram_core0);
OS_csaCore1_BEGIN  = 0xd0000000 + SIZEOF(int_ram_core1);
OS_csaCore2_BEGIN  = 0xd0000000 + SIZEOF(int_ram_core2);
OS_csaCore3_BEGIN  = 0xd0000000 + SIZEOF(int_ram_core3);

/* for read-only memory region providing access to all RAMs */
__GLBL_DATA_START = ADDR(int_ram_core3);
__GLBL_DATA_END = ADDR(int_ram_core0) + SIZEOF(int_ram_core0);

/* _LITERAL_DATA_ required, if -Xsmall-const is used. It should be placed in the middle of the small constant area.
 * In our example we allocate "small" read-only variables starting at __GLBL_SMALL_RODATA_START.
 * BOL instructions have signed 16-bit offsets, so they have a range of -0x08000 to 0x007fff.
*/
_LITERAL_DATA_ = __GLBL_SMALL_RODATA_START + 0x07ff0;

/* The OS kernel shall not use small data areas. To test the OS kernel while -Xsmall-data is enabled,
 * we map all user specific data to core 0. This is not recommended for real-world applications.
 * We assume that customers know what they want to achieve by using SDAs.
*/
_SMALL_DATA_ = __USER_DATA_CORE_OVERRIDE_BEGIN + 0x07ff0;
_SDA_BASE_   = _SMALL_DATA_;
__SDA_BASE_  = _SMALL_DATA_;


SECTIONS
{
	/* Number of CSAs for each core */
	OS_csaCore0_NCSA = 256;
	OS_csaCore1_NCSA = 0;
	OS_csaCore2_NCSA = 0;
	OS_csaCore3_NCSA = 0;
	GROUP :
	{
		/* Output section OS_Startup (Type RESET) */
		. = ((. + (3)) & (~(3)));
		OS_Startup (TEXT) ALIGN(4)  KEEP :
		{
			"*"("OS_Startup" "OS_Startup.*")
		}

		/* Output section OS_Vectors (Type RESET) */
		. = ((. + (3)) & (~(3)));
		OS_Vectors (TEXT) ALIGN(4)  KEEP :
		{
			"*"("OS_InterruptVectors" "OS_InterruptVectors.*" "OS_StartupVectors" "OS_StartupVectors.*" "OS_ExceptionVectors" "OS_ExceptionVectors.*")
		}

	} > int_rom_vect
	GROUP :
	{
		/* Output section text (Type TEXT) */
		. = ((. + (31)) & (~(31)));
		text (TEXT) ALIGN(32)   :
		{
			__GLBL_TEXT_START = .;
			"*"(".text" ".text.*")
			. = ALIGN(32);
			__GLBL_TEXT_END = .;
		}

		/* Output section srodata (Type SMALL_RODATA) */
		. = ((. + (31)) & (~(31)));
		srodata (CONST) ALIGN(32)   :
		{
			__GLBL_SMALL_RODATA_START = .;
			"*"(".ldata" ".ldata.*")
			. = ALIGN(32);
			__GLBL_SMALL_RODATA_END = .;
		}

		/* Output section rodata (Type RODATA) */
		. = ((. + (31)) & (~(31)));
		rodata (CONST) ALIGN(32)   :
		{
			"*"(".rodata" ".rodata.*" ".zrodata" ".zrodata.*" ".ldata" ".ldata.*")
			. = ALIGN(32);
			__GLBL_RODATA_END = .;
		}

		__GLBL_RODATA_START = "__GLBL_TEXT_START";
	} > int_rom
	GROUP :
	{
		/* Output section stacks.TRICORE_core3 (Type STACK) */
		. = ((. + (63)) & (~(63)));
		stacks.TRICORE_core3 (BSS) ALIGN(64)   :
		{
			"*"(".bss.core3.os_kernstack*" ".bss.core3.os_kernstack*.*")
			. = ALIGN(8);
			KERN_STACK_END_CORE3 = .;
		}

		/* Output section tstacks.TRICORE_core3 (Type STACK) */
		. = ((. + (63)) & (~(63)));
		tstacks.TRICORE_core3 (BSS) ALIGN(64)   :
		{
			"*"(".bss.core3.os_taskstack*" ".bss.core3.os_taskstack*.*")
		}

		/* Output section data.TRICORE_core3 (Type DATA) */
		__INITDATA_C3 = __GLBL_RODATA_END;
		. = ((. + (63)) & (~(63)));
		data.TRICORE_core3 (DATA) ALIGN(64) LOAD(__INITDATA_C3)   :
		{
			__STARTDATA_C3 = .;
			"*"(".data.core3" ".data.core3.*" ".data.shared.core3" ".data.shared.core3.*")
			. = ALIGN(32);
			__ENDDATA_C3 = .;
		}

		/* Output section bss.TRICORE_core3 (Type BSS) */
		. = ((. + (31)) & (~(31)));
		bss.TRICORE_core3 (BSS) ALIGN(32)   :
		{
			__STARTBSS_C3 = .;
			"*"(".bss.core3" ".bss.core3.*" ".bss.shared.core3" ".bss.shared.core3.*")
			. = ALIGN(32);
			__ENDBSS_C3 = .;
		}

	} > int_ram_core3
	GROUP :
	{
		/* Output section stacks.TRICORE_core2 (Type STACK) */
		. = ((. + (63)) & (~(63)));
		stacks.TRICORE_core2 (BSS) ALIGN(64)   :
		{
			"*"(".bss.core2.os_kernstack*" ".bss.core2.os_kernstack*.*")
			. = ALIGN(8);
			KERN_STACK_END_CORE2 = .;
		}

		/* Output section tstacks.TRICORE_core2 (Type STACK) */
		. = ((. + (63)) & (~(63)));
		tstacks.TRICORE_core2 (BSS) ALIGN(64)   :
		{
			"*"(".bss.core2.os_taskstack*" ".bss.core2.os_taskstack*.*")
		}

		/* Output section data.TRICORE_core2 (Type DATA) */
		__INITDATA_C2 = __INITDATA_C3 + (ADDR(bss.TRICORE_core3) - ADDR(data.TRICORE_core3));
		. = ((. + (63)) & (~(63)));
		data.TRICORE_core2 (DATA) ALIGN(64) LOAD(__INITDATA_C2)   :
		{
			__STARTDATA_C2 = .;
			"*"(".data.core2" ".data.core2.*" ".data.shared.core2" ".data.shared.core2.*")
			. = ALIGN(32);
			__ENDDATA_C2 = .;
		}

		/* Output section bss.TRICORE_core2 (Type BSS) */
		. = ((. + (31)) & (~(31)));
		bss.TRICORE_core2 (BSS) ALIGN(32)   :
		{
			__STARTBSS_C2 = .;
			"*"(".bss.core2" ".bss.core2.*" ".bss.shared.core2" ".bss.shared.core2.*")
			. = ALIGN(32);
			__ENDBSS_C2 = .;
		}

	} > int_ram_core2
	GROUP :
	{
		/* Output section stacks.TRICORE_core1 (Type STACK) */
		. = ((. + (63)) & (~(63)));
		stacks.TRICORE_core1 (BSS) ALIGN(64)   :
		{
			"*"(".bss.core1.os_kernstack*" ".bss.core1.os_kernstack*.*")
			. = ALIGN(8);
			KERN_STACK_END_CORE1 = .;
		}

		/* Output section tstacks.TRICORE_core1 (Type STACK) */
		. = ((. + (63)) & (~(63)));
		tstacks.TRICORE_core1 (BSS) ALIGN(64)   :
		{
			"*"(".bss.core1.os_taskstack*" ".bss.core1.os_taskstack*.*")
		}

		/* Output section data.TRICORE_core1 (Type DATA) */
		__INITDATA_C1 = __INITDATA_C2 + (ADDR(bss.TRICORE_core2) - ADDR(data.TRICORE_core2));
		. = ((. + (63)) & (~(63)));
		data.TRICORE_core1 (DATA) ALIGN(64) LOAD(__INITDATA_C1)   :
		{
			__STARTDATA_C1 = .;
			"*"(".data.core1" ".data.core1.*" ".data.shared.core1" ".data.shared.core1.*")
			. = ALIGN(32);
			__ENDDATA_C1 = .;
		}

		/* Output section bss.TRICORE_core1 (Type BSS) */
		. = ((. + (31)) & (~(31)));
		bss.TRICORE_core1 (BSS) ALIGN(32)   :
		{
			__STARTBSS_C1 = .;
			"*"(".bss.core1" ".bss.core1.*" ".bss.shared.core1" ".bss.shared.core1.*")
			. = ALIGN(32);
			__ENDBSS_C1 = .;
		}

	} > int_ram_core1
	GROUP :
	{
		/* Output section stacks.TRICORE_core0 (Type STACK) */
		. = ((. + (63)) & (~(63)));
		stacks.TRICORE_core0 (BSS) ALIGN(64)   :
		{
			"*"(".bss.core0.os_kernstack*" ".bss.core0.os_kernstack*.*")
			. = ALIGN(8);
			KERN_STACK_END_CORE0 = .;
		}

		/* Output section tstacks.TRICORE_core0 (Type STACK) */
		. = ((. + (63)) & (~(63)));
		tstacks.TRICORE_core0 (BSS) ALIGN(64)   :
		{
			"*"(".bss.core0.os_taskstack*" ".bss.core0.os_taskstack*.*")
		}

		/* Output section data.TRICORE_core0 (Type DATA) */
		__INITDATA_C0 = __INITDATA_C1 + (ADDR(bss.TRICORE_core1) - ADDR(data.TRICORE_core1));
		. = ((. + (63)) & (~(63)));
		data.TRICORE_core0 (DATA) ALIGN(64) LOAD(__INITDATA_C0)   :
		{
			__STARTDATA_C0 = .;
			"*"(".data.core0" ".data.core0.*" ".data.shared.core0" ".data.shared.core0.*")
			. = ALIGN(32);
			__ENDDATA_C0 = .;
		}

		/* Output section bss.TRICORE_core0 (Type BSS) */
		. = ((. + (31)) & (~(31)));
		bss.TRICORE_core0 (BSS) ALIGN(32)   :
		{
			__STARTBSS_C0 = .;
			"*"(".bss.core0" ".bss.core0.*" ".bss.shared.core0" ".bss.shared.core0.*")
			. = ALIGN(32);
			__ENDBSS_C0 = .;
		}

	} > int_ram_core0
	GROUP :
	{
		/* Output section data.TRICORE_shared_os (Type DATA) */
		__INITDATA_SHARED_OS = __INITDATA_C0 + (ADDR(bss.TRICORE_core0) - ADDR(data.TRICORE_core0));
		. = ((. + (63)) & (~(63)));
		data.TRICORE_shared_os (DATA) ALIGN(64) LOAD(__INITDATA_SHARED_OS)   :
		{
			__STARTDATA_SHARED_OS = .;
			"*"(".data.shared.os" ".data.shared.os.*")
			. = ALIGN(32);
			__ENDDATA_SHARED_OS = .;
		}

		/* Output section bss.TRICORE_shared_os (Type BSS) */
		. = ((. + (31)) & (~(31)));
		bss.TRICORE_shared_os (BSS) ALIGN(32)   :
		{
			__STARTBSS_SHARED_OS = .;
			"*"(".bss.shared.os" ".bss.shared.os.*")
			. = ALIGN(32);
			__ENDBSS_SHARED_OS = .;
		}

	} > int_ram_core0
	GROUP :
	{
		/* Mixing in SDA variables: */
		/* Output section .sdata.data_C0.OS_SYSTEM_0 (Type SDATA) */
		__IDAT_OS_SYSTEM_0 = __INITDATA_SHARED_OS + (ADDR(bss.TRICORE_shared_os) - ADDR(data.TRICORE_shared_os));
		. = ((. + (63)) & (~(63)));
		.sdata.data_C0.OS_SYSTEM_0  ALIGN(64) LOAD(__IDAT_OS_SYSTEM_0)   :
		{
			__DATA_OS_SYSTEM_0 = .;
			"OS_SYSTEM_0_gen.o"(".sdata" ".sdata.*")
			. = ALIGN(64);
			GENLD_SECEND_.sdata.data_C0.OS_SYSTEM_0 = .;
		}

		LNK_SDA_INITEND_DATA___IEND_OS_SYSTEM_0 = __IDAT_OS_SYSTEM_0 + (GENLD_SECEND_.sdata.data_C0.OS_SYSTEM_0 - ADDR(.sdata.data_C0.OS_SYSTEM_0));
		/* Output section data_C0.OS_SYSTEM_0 (Type DATA) */
		LNK_NONSDA_INIT_DATA___IDAT_OS_SYSTEM_0 = __IDAT_OS_SYSTEM_0 + (ADDR(data_C0.OS_SYSTEM_0) - ADDR(.sdata.data_C0.OS_SYSTEM_0));
		. = ((. + (63)) & (~(63)));
		data_C0.OS_SYSTEM_0 (DATA) ALIGN(64) LOAD(LNK_NONSDA_INIT_DATA___IDAT_OS_SYSTEM_0)   :
		{
			LNK_NONSDA_START_DATA___DATA_OS_SYSTEM_0 = .;
			"OS_SYSTEM_0_gen.o"(".data" ".data.*" ".zdata" ".zdata.*" ".sdata" ".sdata.*")
			. = ALIGN(32);
			GENLD_SECEND_data_C0.OS_SYSTEM_0 = .;
		}

		__IEND_OS_SYSTEM_0 = LNK_NONSDA_INIT_DATA___IDAT_OS_SYSTEM_0 + (GENLD_SECEND_data_C0.OS_SYSTEM_0 - ADDR(data_C0.OS_SYSTEM_0));
		/* Mixing in SDA variables: */
		/* Output section .sbss.bss_C0.OS_SYSTEM_0 (Type SBSS) */
		. = ((. + (31)) & (~(31)));
		.sbss.bss_C0.OS_SYSTEM_0  ALIGN(32)   :
		{
			"OS_SYSTEM_0_gen.o"(".sbss" ".sbss.*")
			. = ALIGN(32);
			LNK_SDA_END_BSS___DEND_OS_SYSTEM_0 = .;
		}

		/* Output section bss_C0.OS_SYSTEM_0 (Type BSS) */
		. = ((. + (31)) & (~(31)));
		bss_C0.OS_SYSTEM_0 (BSS) ALIGN(32)   :
		{
			"OS_SYSTEM_0_gen.o"(".bss" ".bss.*" ".zbss" ".zbss.*" ".sbss" ".sbss.*" ".lbss" ".lbss.*")
			. = ALIGN(32);
			__DEND_OS_SYSTEM_0 = .;
		}

		. += ((__DEND_OS_SYSTEM_0 > __DATA_OS_SYSTEM_0) ? 8 : 0); /* gap between regions */

		/* Mixing in SDA variables: */
		/* Output section .sdata.data.TRICORE (Type SDATA) */
		__INITDATA_ANON = LNK_NONSDA_INIT_DATA___IDAT_OS_SYSTEM_0 + (ADDR(.sbss.bss_C0.OS_SYSTEM_0) - ADDR(data_C0.OS_SYSTEM_0));
		. = ((. + (63)) & (~(63)));
		.sdata.data.TRICORE  ALIGN(64) LOAD(__INITDATA_ANON)   :
		{
			__STARTDATA_ANON = .;
			"*"(".sdata" ".sdata.*")
			. = ALIGN(64);
			LNK_SDA_END_DATA___ENDDATA_ANON = .;
		}

		/* Output section data.TRICORE (Type DATA) */
		LNK_NONSDA_INIT_DATA___INITDATA_ANON = __INITDATA_ANON + (ADDR(data.TRICORE) - ADDR(.sdata.data.TRICORE));
		. = ((. + (63)) & (~(63)));
		data.TRICORE (DATA) ALIGN(64) LOAD(LNK_NONSDA_INIT_DATA___INITDATA_ANON)   :
		{
			LNK_NONSDA_START_DATA___STARTDATA_ANON = .;
			"*"(".data" ".data.*" ".zdata" ".zdata.*" ".sdata" ".sdata.*")
			. = ALIGN(32);
			__ENDDATA_ANON = .;
		}

		/* Mixing in SDA variables: */
		/* Output section .sbss.bss.TRICORE (Type SBSS) */
		. = ((. + (31)) & (~(31)));
		.sbss.bss.TRICORE  ALIGN(32)   :
		{
			__STARTBSS_ANON = .;
			"*"(".sbss" ".sbss.*")
			. = ALIGN(32);
			LNK_SDA_END_BSS___ENDBSS_ANON = .;
		}

		/* Output section bss.TRICORE (Type BSS) */
		. = ((. + (31)) & (~(31)));
		bss.TRICORE (BSS) ALIGN(32)   :
		{
			LNK_NONSDA_START_BSS___STARTBSS_ANON = .;
			"*"(".bss" ".bss.*" ".zbss" ".zbss.*" ".sbss" ".sbss.*" ".lbss" ".lbss.*")
			. = ALIGN(32);
			__ENDBSS_ANON = .;
		}

		/* Note: Range [LNK_SDA_DUMMY_BEGIN,LNK_SDA_DUMMY_END) should be empty. */
		LNK_SDA_DUMMY_BEGIN = .;
		.sbss  ALIGN(32) :{}
		LNK_SDA_DUMMY_END = .;
	} > int_ram_core0
	__USER_DATA_CORE_OVERRIDE_BEGIN = __DATA_OS_SYSTEM_0;
	OS_INITIAL_SP = ("KERN_STACK_END_CORE0" & 0xfffffff8);
}
